Administration
--------------

Administration provides an interface to system level admin tasks such as 
creating administrators, updating SMC with dynamic updates or engine upgrades,
running tasks, etc.

Administrators
++++++++++++++

Creating administrators and modifying settings can be done using the 
:py:class:`smc.elements.user.AdminUser` class.

For example, to create a user called 'administrator' and modify after creation, do:

Create admin:

.. code-block:: python

   admin = AdminUser.create('administrator')
   if admin.href:
     print "Successfully created admin"
     
To modify after creation by setting a password and making a superuser:

.. code-block:: python

   admin = AdminUser('administrator')
   admin.change_password('mynewpassword')
   admin.modify_attribute(superuser=True)
   admin.enable_disable() #enable or disable account

Tasks
+++++

Tasks may be generated by methods within certain classes, for example, many
classes support an export() method. This is an asynchronous task that generates a 
'follower' link to the task. 

It is possible to monitor those asynchronous operations seperately from the direct
method call by getting the follower href and using :py:class:`smc.actions.tasks.TaskMonitor`
or :py:class:`smc.actions.tasks.TaskDownload` classes.

For example, fire off a policy update on an engine and get the asynchronous follower href:

.. code-block:: python

   engine = Engine('myfw')
   follower_href = engine.refresh() #This isn't required as engine will still refresh
   task = TaskMonitor(follower_href).watch()
   for message in task:
     print message

System
++++++

System level tasks include operations such as checking for and downloading a new
dynamic update, engine upgrades, last activated package, SMC version, SMC time, 
emptying the trash bin, viewing all license details, importing, exporting 
elements and submitting global blacklist entries.

To view any available update packages:

.. code-block:: python
   
   system = System()
   system.update_package() #check all dynamic update packages
   system.update_package_download() #download latest available
   
Empty the trash bin:

.. code-block:: python

   system = System()
   system.empty_trash_bin()
